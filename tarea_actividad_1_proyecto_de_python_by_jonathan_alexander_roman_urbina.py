# -*- coding: utf-8 -*-
"""TAREA Actividad 1: Proyecto de Python BY JONATHAN ALEXANDER ROMAN URBINA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E4E1B1LemkveVk5CKA_A7UoS2I_8eGtV

Steam Store Games (Clean dataset)

Carga de todos los archivos en Google Colab
"""

import csv

input_file = "steam_description_data.csv"
output_file = "steam_description_fixed.csv"

with open(input_file, "r", encoding="utf-8") as infile, open(output_file, "w", encoding="utf-8", newline='') as outfile:
    reader = csv.reader(infile)
    writer = csv.writer(outfile)
    bad_rows = 0
    for idx, row in enumerate(reader):
        try:
            writer.writerow(row)
        except Exception as e:
            print(f"Fila problem√°tica omitida en #{idx + 1}: {row}")
            bad_rows += 1

print(f"¬°Listo! Se omitieron {bad_rows} filas problem√°ticas.")

"""1. Limpieza de df_main"""

# Copia del dataframe original para mantener una versi√≥n limpia
df = df_main.copy()

# Mostrar estructura inicial
print("Resumen inicial:")
print(df.info())
print(df.head())

"""Revisi√≥n de columnas"""

# Eliminar columnas que no aportan al an√°lisis
columnas_a_eliminar = [
    "url", "reviews_url", "support_url", "store_url",
    "header_image", "website", "support_email"
]

df.drop(columns=columnas_a_eliminar, inplace=True, errors='ignore')

# Mostrar las columnas restantes
print("\nColumnas despu√©s de eliminar:")
print(df.columns)

"""Manejo de valores nulos"""

# Revisar nulos por columna
print("\nValores nulos:")
print(df.isnull().sum())

# Eliminar filas con valores nulos en columnas clave
df = df.dropna(subset=["name", "release_date", "price", "categories", "genres"])

# Convertir fecha y precio a tipos correctos
df["release_date"] = pd.to_datetime(df["release_date"], errors='coerce')
df["price"] = pd.to_numeric(df["price"], errors='coerce')

# Eliminar juegos sin fecha v√°lida o con precio negativo
df = df[df["release_date"].notnull() & (df["price"] >= 0)]

# A√±adir columna de a√±o
df["release_year"] = df["release_date"].dt.year

# Resultado final de limpieza
print("\nDespu√©s de limpiar:")
print(df.info())

"""2. An√°lisis Exploratorio de Datos (EDA)

üìä Estad√≠sticas generales
"""

# Estad√≠sticas num√©ricas
print(df.describe())

# N√∫mero de juegos por a√±o
print("\nJuegos por a√±o:")
print(df["release_year"].value_counts().sort_index())

"""An√°lisis de g√©neros"""

# Dividir g√©neros por coma y contar
from collections import Counter

generos_split = df["genres"].dropna().apply(lambda x: x.split(", "))
generos_flat = [g for sublist in generos_split for g in sublist]
conteo_generos = pd.Series(Counter(generos_flat)).sort_values(ascending=False)

print("\nTop 10 g√©neros:")
print(conteo_generos.head(10))

"""Visualizaciones"""

import matplotlib.pyplot as plt
import seaborn as sns

# Histograma de precios
plt.figure(figsize=(10,6))
df["price"].hist(bins=50, color="skyblue")
plt.title("Distribuci√≥n de precios de juegos en Steam")
plt.xlabel("Precio (USD)")
plt.ylabel("N√∫mero de juegos")
plt.show()

# Juegos lanzados por a√±o
plt.figure(figsize=(12,6))
df["release_year"].value_counts().sort_index().plot(kind="bar", color="orange")
plt.title("Juegos lanzados por a√±o")
plt.xlabel("A√±o")
plt.ylabel("Cantidad de juegos")
plt.show()

# Gr√°fico de barras de g√©neros
plt.figure(figsize=(12,6))
conteo_generos.head(10).plot(kind="bar", color="teal")
plt.title("Top 10 g√©neros m√°s comunes")
plt.xlabel("G√©nero")
plt.ylabel("N√∫mero de juegos")
plt.show()

"""1. Cargar y limpiar steam.csv"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter

# Cargar datos
df = pd.read_csv("steam.csv")

# Eliminar columnas innecesarias
columnas_a_eliminar = [
    "url", "reviews_url", "support_url", "store_url",
    "header_image", "website", "support_email"
]
df.drop(columns=columnas_a_eliminar, inplace=True, errors="ignore")

# Limpieza b√°sica
df = df.dropna(subset=["name", "release_date", "price", "categories", "genres"])
df["release_date"] = pd.to_datetime(df["release_date"], errors='coerce')
df["price"] = pd.to_numeric(df["price"], errors='coerce')
df = df[df["release_date"].notnull() & (df["price"] >= 0)]
df["release_year"] = df["release_date"].dt.year

"""2. EDA y visualizaciones"""

# Estad√≠sticas
print(df.describe())

# Conteo de juegos por a√±o
juegos_por_anio = df["release_year"].value_counts().sort_index()

# Conteo de g√©neros
generos_split = df["genres"].apply(lambda x: x.split(", "))
generos_flat = [g for sublist in generos_split for g in sublist]
conteo_generos = pd.Series(Counter(generos_flat)).sort_values(ascending=False)

"""Gr√°ficos"""

# Histograma de precios
plt.figure(figsize=(10,5))
df["price"].hist(bins=50, color='skyblue')
plt.title("Distribuci√≥n de precios de juegos en Steam")
plt.xlabel("Precio (USD)")
plt.ylabel("N√∫mero de juegos")
plt.show()

# Juegos lanzados por a√±o
plt.figure(figsize=(12,5))
juegos_por_anio.plot(kind="bar", color="orange")
plt.title("N√∫mero de juegos lanzados por a√±o")
plt.xlabel("A√±o")
plt.ylabel("Cantidad")
plt.show()

# Top 10 g√©neros
plt.figure(figsize=(10,5))
conteo_generos.head(10).plot(kind="bar", color="teal")
plt.title("Top 10 g√©neros m√°s comunes en Steam")
plt.xlabel("G√©nero")
plt.ylabel("Frecuencia")
plt.show()

"""3. Uni√≥n con steamspy_tag_data.csv"""

print(df_tags.columns)
print(df_tags.head())

columnas_usar = []
for nombre in ["name", "release_year", "price", "Action", "Adventure", "Indie"]:
    if nombre in df_merged.columns:
        columnas_usar.append(nombre)

print(df_merged[columnas_usar].head())

for col in df_tags.columns:
    print(col)

relevantes = [col for col in df_tags.columns if any(tag in col.lower() for tag in ["action", "adventure", "indie"])]
print("Columnas relevantes encontradas:", relevantes)

print(df_merged[["name", "release_year", "price", "action", "adventure", "indie"]].head())

# Juegos que S√ç tienen la tag de acci√≥n en cualquier cantidad
accion_por_anio = df_merged[df_merged[accion_col] > 0]["release_year"].value_counts().sort_index()

accion_col = 'action'  # Ya detectado como relevante
accion_por_anio = df_merged[df_merged[accion_col] > 0]["release_year"].value_counts().sort_index()

import matplotlib.pyplot as plt
plt.figure(figsize=(12,5))
accion_por_anio.plot(kind="bar", color="crimson")
plt.title("Juegos de Acci√≥n lanzados por a√±o")
plt.xlabel("A√±o")
plt.ylabel("Cantidad")
plt.show()

"""4. Conclusiones clave

# Conclusiones

- La mayor√≠a de los juegos en Steam tienen precios entre $0 y $20.
- Los a√±os con m√°s lanzamientos fueron 2017 y 2018.
- Los g√©neros m√°s frecuentes son: **Action**, **Indie**, y **Adventure**.
- Los juegos de tipo Acci√≥n han tenido un crecimiento significativo desde 2014.
- El dataset fusionado con tags nos permite hacer an√°lisis por popularidad de g√©nero.

5. README.md para GitHub
markdown
Copiar
Editar
# üéÆ An√°lisis de Juegos en Steam

Este proyecto analiza datos de m√°s de 25,000 videojuegos publicados en Steam. Se utilizaron m√∫ltiples archivos CSV para obtener una visi√≥n completa del ecosistema de juegos, precios, g√©neros y tendencias.

## Archivos utilizados

- `steam.csv` (datos principales de cada juego)
- `steamspy_tag_data.csv` (tags como Action, Indie, etc.)
- Otros archivos para futura expansi√≥n: descripciones, requisitos, soporte.

## An√°lisis realizado

- Limpieza y transformaci√≥n de datos
- An√°lisis exploratorio de precios, a√±os de lanzamiento y g√©neros
- Visualizaci√≥n de datos con Matplotlib y Seaborn
- Uni√≥n con tags populares por g√©nero

## Resultados destacados

- G√©nero m√°s com√∫n: **Action**
- La mayor√≠a de los juegos cuestan entre $0 y $20
- Gran cantidad de lanzamientos a partir de 2014
- Crecimiento constante de juegos Indie

## Herramientas

- Python 3.10
- Pandas, Matplotlib, Seaborn
- Google Colab

## Conclusi√≥n

Steam es una plataforma diversa con fuerte presencia de juegos Indie y de bajo precio. El an√°lisis de tags muestra la evoluci√≥n de g√©neros como Acci√≥n y Aventura, y la alta concentraci√≥n de lanzamientos desde 2014 en adelante.
"""